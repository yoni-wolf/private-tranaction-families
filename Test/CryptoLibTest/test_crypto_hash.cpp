#include <gtest/gtest.h>
#include <gmock/gmock.h> 
#include "crypto.h"

// test values taken from: https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/shs/shabytetestvectors.zip
// SHA256ShortMsg.rsp
TEST(CryptoLib, sha256_msg) 
{ 
	sha256_data_t sha_output = {0};
	
	const uint8_t sha_input1[10] = { 0x74, 0xcb, 0x93, 0x81, 0xd8, 0x9f, 0x5a, 0xa7, 0x33, 0x68 };
	const sha256_data_t sha_expexted1 = {
		0x73, 0xd6, 0xfa, 0xd1, 0xca, 0xaa, 0x75, 0xb4,
		0x3b, 0x21, 0x73, 0x35, 0x61, 0xfd, 0x39, 0x58,
		0xbd, 0xc5, 0x55, 0x19, 0x4a, 0x03, 0x7c, 0x2a,
		0xdd, 0xec, 0x19, 0xdc, 0x2d, 0x7a, 0x52, 0xbd };
		
	const uint8_t sha_input2[16] = {
		0x0a, 0x27, 0x84, 0x7c, 0xdc, 0x98, 0xbd, 0x6f,
		0x62, 0x22, 0x0b, 0x04, 0x6e, 0xdd, 0x76, 0x2b 
	};
	const sha256_data_t sha_expexted2 = {
		0x80, 0xc2, 0x5e, 0xc1, 0x60, 0x05, 0x87, 0xe7,
		0xf2, 0x8b, 0x18, 0xb1, 0xb1, 0x8e, 0x3c, 0xdc,
		0x89, 0x92, 0x8e, 0x39, 0xca, 0xb3, 0xbc, 0x25,
		0xe4, 0xd4, 0xa4, 0xc1, 0x39, 0xbc, 0xed, 0xc4
	};
	
	ASSERT_EQ (sha256_msg(NULL, 10, &sha_output), false);
	ASSERT_EQ (sha256_msg(sha_input1, 0, &sha_output), false);
	ASSERT_EQ (sha256_msg(sha_input1, 10, NULL), false);
	
	ASSERT_EQ (sha256_msg(sha_input1, 10, &sha_output), true);
	ASSERT_EQ (memcmp(sha_output, sha_expexted1, sizeof(sha256_data_t)), 0);
	
	ASSERT_EQ (sha256_msg(sha_input2, 16, &sha_output), true);
	ASSERT_EQ (memcmp(sha_output, sha_expexted2, sizeof(sha256_data_t)), 0);

}


// test values taken from: https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/shs/shabytetestvectors.zip
// SHA512ShortMsg.rsp
TEST(CryptoLib, sha512_msg) 
{ 
	sha512_data_t sha_output = {0};
	
	const uint8_t sha_input1[10] = {0xba, 0xd7, 0xc6, 0x18, 0xf4, 0x5b, 0xe2, 0x07, 0x97, 0x5e};
	const sha512_data_t sha_expexted1 = {
		0x58, 0x86, 0x82, 0x89, 0x59, 0xd1, 0xf8, 0x22,
		0x54, 0x06, 0x8b, 0xe0, 0xbd, 0x14, 0xb6, 0xa8,
		0x8f, 0x59, 0xf5, 0x34, 0x06, 0x1f, 0xb2, 0x03,
		0x76, 0xa0, 0x54, 0x10, 0x52, 0xdd, 0x36, 0x35,
		0xed, 0xf3, 0xc6, 0xf0, 0xca, 0x3d, 0x08, 0x77,
		0x5e, 0x13, 0x52, 0x5d, 0xf9, 0x33, 0x3a, 0x21,
		0x13, 0xc0, 0xb2, 0xaf, 0x76, 0x51, 0x58, 0x87,
		0x52, 0x99, 0x10, 0xb6, 0xc7, 0x93, 0xc8, 0xa5
	};
	 
	const uint8_t sha_input2[16] = {
		0xcd, 0x67, 0xbd, 0x40, 0x54, 0xaa, 0xa3, 0xba,
		0xa0, 0xdb, 0x17, 0x8c, 0xe2, 0x32, 0xfd, 0x5a
		};
	const sha512_data_t sha_expexted2 = {
		0x0d, 0x85, 0x21, 0xf8, 0xf2, 0xf3, 0x90, 0x03,
		0x32, 0xd1, 0xa1, 0xa5, 0x5c, 0x60, 0xba, 0x81,
		0xd0, 0x4d, 0x28, 0xdf, 0xe8, 0xc5, 0x04, 0xb6,
		0x32, 0x8a, 0xe7, 0x87, 0x92, 0x5f, 0xe0, 0x18,
		0x8f, 0x2b, 0xa9, 0x1c, 0x3a, 0x9f, 0x0c, 0x16,
		0x53, 0xc4, 0xbf, 0x0a, 0xda, 0x35, 0x64, 0x55,
		0xea, 0x36, 0xfd, 0x31, 0xf8, 0xe7, 0x3e, 0x39,
		0x51, 0xca, 0xd4, 0xeb, 0xba, 0x8c, 0x6e, 0x04
	};
	
	ASSERT_EQ (sha512_msg(NULL, 10, &sha_output), false);
	ASSERT_EQ (sha512_msg(sha_input1, 0, &sha_output), false);
	ASSERT_EQ (sha512_msg(sha_input1, 10, NULL), false);
	
	ASSERT_EQ (sha512_msg(sha_input1, 10, &sha_output), true);
	ASSERT_EQ (memcmp(sha_output, sha_expexted1, sizeof(sha512_data_t)), 0);
	
	ASSERT_EQ (sha512_msg(sha_input2, 16, &sha_output), true);
	ASSERT_EQ (memcmp(sha_output, sha_expexted2, sizeof(sha512_data_t)), 0);

}


// https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38b.pdf
// appendix D1, samples 2 and 3
TEST(CryptoLib, cmac_msg) 
{
	const uint8_t cmac_key[CMAC_KEY_SIZE] = {
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
        0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c};
    
    uint8_t cmac_output[CMAC_KEY_SIZE] = {0};
        
	const uint8_t cmac_input1[CMAC_KEY_SIZE] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a};
	uint8_t cmac_expexted1[CMAC_KEY_SIZE] = {
		0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44,
		0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c };

	const uint8_t cmac_input2[40] = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a, 
		0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c,
		0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51, 
		0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11 };
	uint8_t cmac_expexted2[CMAC_KEY_SIZE] = {
		0xdf, 0xa6, 0x67, 0x47, 0xde, 0x9a, 0xe6, 0x30,
		0x30, 0xca, 0x32, 0x61, 0x14, 0x97, 0xc8, 0x27 };
	
	ASSERT_EQ (cmac_msg(NULL, CMAC_KEY_SIZE, cmac_input1, CMAC_KEY_SIZE, cmac_output, CMAC_KEY_SIZE), false);
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE-1, cmac_input1, CMAC_KEY_SIZE, cmac_output, CMAC_KEY_SIZE), false);
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, NULL, CMAC_KEY_SIZE, cmac_output, CMAC_KEY_SIZE), false);
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, cmac_input1, 0, cmac_output, CMAC_KEY_SIZE), false);
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, cmac_input1, CMAC_KEY_SIZE, NULL, CMAC_KEY_SIZE), false);
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, cmac_input1, CMAC_KEY_SIZE, cmac_output, CMAC_KEY_SIZE-1), false);
	
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, cmac_input1, CMAC_KEY_SIZE, cmac_output, CMAC_KEY_SIZE), true);
	ASSERT_EQ (memcmp(cmac_output, cmac_expexted1, CMAC_KEY_SIZE), 0);
	
	ASSERT_EQ (cmac_msg(cmac_key, CMAC_KEY_SIZE, cmac_input2, 40, cmac_output, CMAC_KEY_SIZE), true);
	ASSERT_EQ (memcmp(cmac_output, cmac_expexted2, CMAC_KEY_SIZE), 0);

}

